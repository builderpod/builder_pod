<%= form_with(model: project, local: true) do |form| %>
  <% if project.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(project.errors.count, "error") %> prohibited this project from being saved:</h2>

      <ul>
      <% project.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <br>

<div class="leading-loose">
  <form class="max-w-xl m-4 p-10 bg-white rounded shadow-xl">
    <p class="text-gray-800 font-medium">Project information</p>
      <div class="mt-2">
        <label class=" block text-sm text-gray-600" for="cus_email">Project Address</label>
    
        <% if project.address.length > 1 %>
            <div id="locationField">
              <input id="autocomplete"
                     placeholder="<%= project.address %>"
                     onFocus="initAutocomplete()"
                     class="w-full px-2 py-2 text-gray-700 bg-gray-200 rounded"
                     type="text"/>
            </div>
        <% else %>
            <div id="locationField">
              <input id="autocomplete"
                     placeholder="Enter address"
                     onFocus="initAutocomplete()"
                     class="w-full px-2 py-2 text-gray-700 bg-gray-200 rounded"
                     type="text"/>
            </div>
        <% end %>
      </div>
      <br>
      <div class="mt-2">
      <label class="block text-sm text-gray-600" for="cus_name">Upload a picture of the property </label>
          <% if project.avatar.attached? %>
           <div>
              <%= image_tag project_avatar(project, 100), id: "project-image" %>
          </div>
          <% end %>
          <div>
              <%= form.file_field :avatar %>
          </div>
      </div>
          <%= form.hidden_field :street_address %>
          <%= form.hidden_field :locality %>
          <%= form.hidden_field :region %>
          <%= form.hidden_field :postal_code %>
          <input class="field" id="locality" disabled="true" hidden="true" />
          <input class="field" id="sublocality" disabled="true" hidden="true" />
          <input class="field" id="route" disabled="true" hidden="true" />
          <input class="field" id="street_number" disabled="true" hidden="true" />
         

          <br>
          <p class="text-gray-800 font-medium">Project Service(s)</p>

          <br>
          <div data-controller="nested-form">
            <template data-target="nested-form.template">
              <%= form.fields_for :tasks, Task.new, child_index: 'NEW_RECORD' do |task| %>
                <%= render "task_fields", form: task %>
              <% end %>
            </template>

            <%= form.fields_for :tasks do |task| %>
              <%= render "task_fields", form: task %>
            <% end %>

            <div class="mb-3" data-target="nested-form.links">
              <%= link_to "Add Service", "#", class: "btn btn-outline-primary", data: { action: "click->nested-form#add_association" }, onclick: "startChange()" %>
            </div>
          </div>
          <br>
          <div class="form-group">
            <% if project.persisted? %>
              <div class="float-right">
                <%= link_to 'Destroy', project, method: :delete, class: "text-danger", data: { confirm: 'Are you sure?' } %>
              </div>
            <% end %>

            <%= form.submit class: 'btn btn-primary', onclick: "" %>

            <% if project.persisted? %>
              <%= link_to "Cancel", project, class: "btn btn-link" %>
            <% else %>
              <%= link_to "Cancel", projects_path, class: "btn btn-link" %>
            <% end %>
          </div>


        <% end %>

        <br>
  </form>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyASTMrEaEKlg3PVBdmijz50qmeS8stieWw&libraries=places&callback=initMap" async defer></script>
<script>
  function validateForm() {
  var x = document.getElementById("project_street_address").value;
  if (x == "") {
    alert("Address must be filled out");
    return false;
  }
}
</script>

<script>
// This sample uses the Autocomplete widget to help the user select a
// place, then it retrieves the address components associated with that
// place, and then it populates the form fields with those details.
// This sample requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script
// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var placeSearch, autocomplete;

var componentForm = {
  street_number: 'short_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  postal_code: 'short_name',
  route: 'long_name',
  sublocality_level_1: "long_name"
};


var componentFormConvert = {
  street_number: 'street_number',
  locality: 'locality',
  administrative_area_level_1: 'project_region',
  postal_code: 'project_postal_code',
  route: 'route',
  sublocality_level_1: "sublocality"
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(componentFormConvert[component]).value = '';
    document.getElementById(componentFormConvert[component]).disabled = false;
  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(componentFormConvert[addressType]).value = val;
    }
    var streetNumber = document.getElementById("street_number").value;
    var streetRoute = document.getElementById("route").value;
    var addressVal = streetNumber + ' ' + streetRoute
    document.getElementById("project_street_address").value = addressVal;
    var localityVal = document.getElementById("locality").value;
    document.getElementById("project_locality").value = localityVal;
    if (localityVal.length < 1) {
      var subLocalityVal = document.getElementById("sublocality").value;
      document.getElementById("project_locality").value = subLocalityVal;
      console.log(subLocalityVal);
    }
    console.log(place);
  }
}



// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
    </script>